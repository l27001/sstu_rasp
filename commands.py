from methods import getUserInfo, setUserState, sendErrorMessage

class MsgInfo(): pass

def execute_command(data):
    print(data)
    msg_info = MsgInfo()
    if('my_chat_member' in data):
        return None
    elif('message' in data):
        data = data['message']
        if('text' not in data): # –∏—Å–∫–ª—é—á–µ–Ω–∏–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º message
            return None         # –Ω–æ –±–µ–∑ text –≤ –Ω—ë–º. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        MsgInfo.from_user = data['from']['id']
        MsgInfo.from_chat = data['chat']['id']
        MsgInfo.is_chat = MsgInfo.from_chat < 0
        MsgInfo.text = data['text'].split()
        MsgInfo.msg_id = data['message_id']
        MsgInfo.user_info, MsgInfo.chat_info = getUserInfo(MsgInfo.from_user, MsgInfo.from_chat)
    elif('callback_query' in data): # –≤–æ–∑–º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å?
        MsgInfo.from_user = data['callback_query']['message']['from']['id']
        MsgInfo.from_chat = data['callback_query']['message']['chat']['id']
        MsgInfo.is_chat = MsgInfo.from_chat < 0
        MsgInfo.text = None
        MsgInfo.msg_id = data['callback_query']['message']['message_id']
        MsgInfo.callback_data = data['callback_query']['data'].split("/")
        MsgInfo.callback_data[1] = MsgInfo.callback_data[1].split(",")
        MsgInfo.user_info, MsgInfo.chat_info = getUserInfo(MsgInfo.from_user, MsgInfo.from_chat)
        try:
            return inlines[MsgInfo.callback_data[0]](MsgInfo)
        except Exception as e:
            sendErrorMessage(MsgInfo.from_chat, e)
            return None
    # elif('inline_query' in data):
    #     MsgInfo.from_user = data['inline_query']['from']['id']
    #     MsgInfo.from_chat = None
    #     MsgInfo.is_chat = None
    #     MsgInfo.user_info, MsgInfo.chat_info = getUserInfo(MsgInfo.from_user, None)
    #     return Tg.answerInlineQuery()
    if(MsgInfo.is_chat == True):
        MsgInfo.text[0] = MsgInfo.text[0].split("@")
        if(len(MsgInfo.text[0]) > 1):
            if(MsgInfo.text[0][1] != Tg.username): # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ç–µ–≥—É –±–æ—Ç–∞
                return None                     # –ü—Ä–∏–º–µ—Ä: /status@first_bot –∏ /status@second_bot
        MsgInfo.text[0] = MsgInfo.text[0][0] # —É–±–∏—Ä–∞–µ–º —Ç–µ–≥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    if(MsgInfo.user_info['state'] != None and MsgInfo.text[0][0] != "/"):
        try:
            return states[MsgInfo.user_info['state']](MsgInfo)
        except Exception as e:
            sendErrorMessage(MsgInfo.from_chat, e)
            return None
    cmd = MsgInfo.text[0].lower()
    del(MsgInfo.text[0])
    if(cmds.get(cmd) == None):
        if(MsgInfo.is_chat == False):
            Tg.sendMessage(MsgInfo.from_chat, "üëéüèª –ù–µ –ø–æ–Ω—è–ª", reply_to_message_id=MsgInfo.msg_id)
        return None
    try:
        cmds[cmd](MsgInfo)
    except Exception as e:
        sendErrorMessage(MsgInfo.from_chat, e)
        return None

### –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
def start(MsgInfo):
    Tg.sendMessage(MsgInfo.from_chat, "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –Ω–∞–π–¥—ë–º —Ç–≤–æ—é –≥—Ä—É–ø–ø—É:",
        reply_markup=Tg.generateInlineKeyb(Tg.makeButton("–ü–æ–∏—Å–∫ –ø–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–µ", "pre_find_abbr"), Tg.makeButton("test2", "T2")))

def test(MsgInfo):
    Tg.sendMessage(MsgInfo.from_chat, "sstu_rasp bot by @l270011")

def info(MsgInfo):
    txt = f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\nID: {MsgInfo.from_user}\n–ß–∞—Ç: {MsgInfo.is_chat}/{MsgInfo.from_chat}\n–ì—Ä—É–ø–ø–∞: {MsgInfo.user_info['group_id']}"
    Tg.sendMessage(MsgInfo.from_chat, txt)

def subscribe(MsgInfo):
    if(MsgInfo.is_chat):
        if(MsgInfo.chat_info['subscribe'] == 1):
            mysql.query("UPDATE tg_infoscribe SET subscribe=0 WHERE id = %s", (MsgInfo.from_chat,))
            txt = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ *–æ—Ç–ø–∏—Å–∞–ª–∏ –±–µ—Å–µ–¥—É* –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö"
        else:
            mysql.query("UPDATE tg_infoscribe SET subscribe=1 WHERE id = %s", (MsgInfo.from_chat,))
            txt = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ *–ø–æ–¥–ø–∏—Å–∞–ª–∏ –±–µ—Å–µ–¥—É* –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö"
    else:
        if(MsgInfo.user_info['subscribe'] == 1):
            mysql.query("UPDATE tg_infoscribe SET subscribe=0 WHERE id = %s", (MsgInfo.from_user,))
            txt = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ *–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å* –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö"
        else:
            mysql.query("UPDATE tg_infoscribe SET subscribe=1 WHERE id = %s", (MsgInfo.from_user,))
            txt = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ *–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å* –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö"
    Tg.sendMessage(MsgInfo.from_chat, txt)

### –î–µ–π—Å—Ç–≤–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä/—Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
def pre_find_abbr(MsgInfo):
    setUserState(MsgInfo.from_chat, "sa")
    Tg.editMessageText(MsgInfo.from_chat, MsgInfo.msg_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –≤–∞—à–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ü—Ä–∏–º: –ò–§–°–¢, –°–ó–°, –ê–†–•–¢)")

def select_abbr_name(MsgInfo):
    types = mysql.query("SELECT DISTINCT `type` FROM `groups` WHERE `group-start` = %s", (MsgInfo.text, ), fetch="all")
    if(len(types) == 0):
        Tg.sendMessage(MsgInfo.from_chat, "‚ö† –ì—Ä—É–ø–ø —Å —Ç–∞–∫–æ–π –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        buttons = [Tg.makeButton(i['type'], "sa_c/"+i['type']) for i in types]
        Tg.sendMessage(MsgInfo.from_chat, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è:", reply_markup=Tg.generateInlineKeyb(buttons))

def select_course(MsgInfo):
    pass

### –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
cmds = {'/start':start,
        '/test':test,
        '/info':info,
        '/subscribe':subscribe,'/unsubscribe':subscribe
}

### –°–ø–∏—Å–æ–∫ inline –¥–µ–π—Å—Ç–≤–∏–π
inlines = {
        'pre_find_abbr':pre_find_abbr,
        'sa_c':select_course
}

### –°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
states = {
        'sa':select_abbr_name
}

# sa = select_abbr
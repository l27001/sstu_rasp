from methods import getUserInfo, getUserGroups, setUserState, sendErrorMessage
from datetime import date, timedelta, datetime

class MsgInfo(): pass

def execute_command(data):
    msg_info = MsgInfo()
    if('my_chat_member' in data):
        return None
    elif('message' in data):
        data = data['message']
        if('text' not in data): # –∏—Å–∫–ª—é—á–µ–Ω–∏–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º message
            return None         # –Ω–æ –±–µ–∑ text –≤ –Ω—ë–º. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        MsgInfo.from_user = data['from']['id']
        MsgInfo.from_chat = data['chat']['id']
        MsgInfo.is_chat = MsgInfo.from_chat < 0
        MsgInfo.text = data['text'].split()
        MsgInfo.msg_id = data['message_id']
        MsgInfo.user_info = getUserInfo(MsgInfo.from_user)
        MsgInfo.callback_data = None
        if(MsgInfo.is_chat == True and "reply_to_message" not in data):
            MsgInfo.text[0] = MsgInfo.text[0].split("@")
            if(len(MsgInfo.text[0]) > 1):
                if(MsgInfo.text[0][1] != Tg.username): # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ç–µ–≥—É –±–æ—Ç–∞
                    return None                     # –ü—Ä–∏–º–µ—Ä: /status@first_bot –∏ /status@second_bot
            MsgInfo.text[0] = MsgInfo.text[0][0] # —É–±–∏—Ä–∞–µ–º —Ç–µ–≥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if((MsgInfo.user_info['state'] != None or MsgInfo.is_chat == True) and MsgInfo.text[0][0] != "/"):
            try:
                return states[MsgInfo.user_info['state']](MsgInfo)
            except KeyError:
                return Tg.sendMessage(MsgInfo.from_chat, "‚ö† –û–∂–∏–¥–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=Tg.generateInlineKeyb())
            except Exception as e:
                sendErrorMessage(MsgInfo.from_chat, e)
                return None
        cmd = MsgInfo.text[0].lower()
        del(MsgInfo.text[0])
        if(cmds.get(cmd) == None):
            if(MsgInfo.is_chat == False):
                Tg.sendMessage(MsgInfo.from_chat, "üëéüèª –ù–µ –ø–æ–Ω—è–ª", reply_markup=Tg.generateInlineKeyb(), reply_to_message_id=MsgInfo.msg_id)
            return None
        try:
            cmds[cmd](MsgInfo)
        except Exception as e:
            sendErrorMessage(MsgInfo.from_chat, e)
            return None
    elif('callback_query' in data): # –≤–æ–∑–º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å?
        if('message' in data['callback_query']):
            MsgInfo.from_user = data['callback_query']['message']['from']['id']
            MsgInfo.from_chat = data['callback_query']['message']['chat']['id']
            MsgInfo.text = data['callback_query']['message']['text']
            MsgInfo.msg_id = data['callback_query']['message']['message_id']
        else:
            MsgInfo.from_user = data['callback_query']['from']['id']
            MsgInfo.from_chat = MsgInfo.from_user
            MsgInfo.msg_id = 0
            MsgInfo.text = None
        MsgInfo.is_chat = MsgInfo.from_chat < 0
        MsgInfo.callback_data = data['callback_query']['data'].split("/")
        if(len(MsgInfo.callback_data) > 1):
            MsgInfo.callback_data[1] = MsgInfo.callback_data[1].split(",")
        MsgInfo.user_info = getUserInfo(MsgInfo.from_chat)
        try:
            return inlines[MsgInfo.callback_data[0]](MsgInfo)
        except Exception as e:
            sendErrorMessage(MsgInfo.from_chat, e)
            return None
    elif('inline_query' in data):
        MsgInfo.from_user = data['inline_query']['from']['id']
        MsgInfo.is_chat = True
        MsgInfo.query = data['inline_query']['query']
        MsgInfo.query_id = data['inline_query']['id']
        res = mysql.query("SELECT `id`, `name` FROM `groups` WHERE `name` LIKE %s LIMIT 10",
            ("%"+MsgInfo.query.replace(" ", "%")+"%", ), fetchall=True)
        answers = []
        if(res is None or res == ()):
            answers = []
        else:
            for i in res:
                MsgInfo.callback_data = [None, [i['id']]]
                msg, _ = get_rasp(MsgInfo)
                answers.append(Tg.inlineQueryResult("article", i['id'], title=i['name'],
                    input_message_content={"message_text": msg, "parse_mode": "Markdown"}))
        Tg.answerInlineQuery(MsgInfo.query_id, answers, cache_time=3600, switch_pm_parameter="1", switch_pm_text="üè† –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É")

###
def menu(MsgInfo):
    setUserState(MsgInfo.from_chat, None)
    menu_text = """üëã <b>–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –°–ì–¢–£!</b>
–ë–æ—Ç–∞ –Ω–∞–ø–∏—Å–∞–ª <a href="tg://user?id=731264169">L27001</a>, —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º–∏/–±–∞–≥–∞–º–∏/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∫ –Ω–µ–º—É.
\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≥—Ä—É–ø–ø—É –∫ –∞–∫–∫–∞—É–Ω—Ç—É –¢–ì. –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.
\n<s>–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤—Å—ë-—Ä–∞–≤–Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ —á–∏—Ç–∞–µ—Ç :(</s>"""
    menu_keyb = Tg.generateInlineKeyb(Tg.makeRows(Tg.makeButton("üîç –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É", "start_find"),
        Tg.makeButton("‚ùì –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é", "about"),
        Tg.makeButton("üìù –ú–æ–∏ –≥—Ä—É–ø–ø—ã", "mg"),
        Tg.makeButton("üóíÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "rasp"), max_=2), home=False)
    Tg.editOrSend(MsgInfo, menu_text, reply_markup=menu_keyb)

def about(MsgInfo):
    text = """‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ https://rasp.sstu.ru –≤ —Å–≤–æ—é –±–∞–∑—É –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤.
–ó–∞—Ç–µ–º –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞, –∫–æ–≥–¥–∞ –∫–æ–Ω—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø–∞—Ä/–∫–∞–∫–∏–µ –∏ —Ç–¥ –∏ —Ç–ø. –í—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä—è–º–æ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞! –ó–¥–æ—Ä–æ–≤–æ –ø—Ä–∞–≤–¥–∞?
–í –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ <u>–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É</u>, —á—Ç–æ–±—ã –±–æ—Ç —Å–∞–º –ø—Ä–∏—Å—ã–ª–∞–ª –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ <u><b>19:00</b></u> –ø–æ –°–∞—Ä–∞—Ç–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (+04 GMT).
\n<u><b>‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï</b>
–ê–≤—Ç–æ—Ä —Ö–æ—Ç—å –∏ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è, –Ω–æ –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–∂–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å/–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! –£—á—Ç–∏—Ç–µ —ç—Ç–æ.</u>"""
    if(len(MsgInfo.callback_data) > 1):
        button = Tg.makeRows(Tg.makeButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", f"chk_grp/{MsgInfo.callback_data[1][0]}"))
    else: button = ""
    Tg.editOrSend(MsgInfo, text, reply_markup=Tg.generateInlineKeyb(button))

def start_find(MsgInfo):
    rows = Tg.makeRows(Tg.makeButton("üîç –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", "pre_find_abbr"), Tg.makeButton("‚ùï –Ø –∑–Ω–∞—é ID –≥—Ä—É–ø–ø—ã", "find_by_id"))
    Tg.editOrSend(MsgInfo, "ü§î –ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?:",
        reply_markup=Tg.generateInlineKeyb(rows))

def info(MsgInfo):
    txt = f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\nID: {MsgInfo.from_user}\n–ß–∞—Ç: {MsgInfo.is_chat}/{MsgInfo.from_chat}"
    Tg.editOrSend(MsgInfo, txt)

def pre_find_abbr(MsgInfo):
    setUserState(MsgInfo.from_chat, "sa")
    text = "‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É —Ç–≤–æ–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ü—Ä–∏–º: –ò–§–°–¢, –°–ó–°, –ê–†–•–¢)"
    if(MsgInfo.is_chat == True):
        text += "\n<i>P.S. –í –±–µ—Å–µ–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –±–æ—Ç –µ–≥–æ —É–≤–∏–¥–µ–ª!</i>"
    Tg.editOrSend(MsgInfo, text, reply_markup=Tg.generateInlineKeyb())

def find_by_id(MsgInfo):
    setUserState(MsgInfo.from_chat, "fid")
    rows = Tg.makeRows(Tg.makeButton("‚ùî –ì–¥–µ –≤–∑—è—Ç—å ID –≥—Ä—É–ø–ø—ã?", "where_id"))
    text = "üìß –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≥—Ä—É–ø–ø—ã"
    if(MsgInfo.is_chat == True):
        text += "\n<i>P.S. –í –±–µ—Å–µ–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –±–æ—Ç –µ–≥–æ —É–≤–∏–¥–µ–ª!</i>"
    Tg.editOrSend(MsgInfo, text, reply_markup=Tg.generateInlineKeyb(rows))

def select_by_id(MsgInfo): # –≤—ã–Ω–µ—Å—Ç–∏ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    rows = Tg.makeRows(Tg.makeButton("‚ùî –Ø –Ω–µ –∑–Ω–∞—é ID", "pre_find_abbr"))
    try:
        id_ = int(MsgInfo.text[0])
        if(id_ < 1): raise
    except: return Tg.editOrSend(MsgInfo, "‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã", reply_markup=Tg.generateInlineKeyb(rows))
    grp_name = mysql.query("SELECT `name` FROM `groups` WHERE `id` = %s", (id_, ))
    if(grp_name is None or grp_name == ()):
        return Tg.editOrSend(MsgInfo, "üî¥ –ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=Tg.generateInlineKeyb(rows))
    else: grp_name = grp_name['name']
    count = mysql.query("SELECT COUNT(*) FROM `group_subs` WHERE `user_id` = %s", (MsgInfo.from_chat, ))['COUNT(*)']
    if(count >= 5):
        return Tg.editOrSend(MsgInfo, "üî¥ –í–´ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≥—Ä—É–ø–ø!",
            reply_markup=Tg.generateInlineKeyb())
    already_in = mysql.query("SELECT `user_id` FROM `group_subs` WHERE `user_id` = %s AND `group_id` = %s",
        (MsgInfo.from_chat, id_))
    if(already_in is not None):
        return Tg.editOrSend(MsgInfo, "üî¥ –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–º–∏!",
            reply_markup=Tg.generateInlineKeyb(rows))
    setUserState(MsgInfo.from_chat, None)
    mysql.query("INSERT INTO `group_subs` (`user_id`, `group_id`) VALUES (%s, %s)", (MsgInfo.from_chat, id_))
    Tg.editOrSend(MsgInfo, f"üü¢ –ì—Ä—É–ø–ø–∞ {grp_name} –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤–∞—à–∞!",
        reply_markup=Tg.generateInlineKeyb(Tg.makeRows(Tg.makeButton("üìù –ú–æ–∏ –≥—Ä—É–ø–ø—ã", "mg"),
            Tg.makeButton(f"‚ùó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", f"toggle_sub/{id_}"),
            Tg.makeButton(f"‚ÅâÔ∏è –ß—Ç–æ –∑–∞ —Ä–∞—Å—Å—ã–ª–∫–∞?", "about"), max_=1)))

def where_id(MsgInfo):
    rows = Tg.makeRows(Tg.makeButton("‚ùî –Ø –Ω–µ –∑–Ω–∞—é ID", "pre_find_abbr"))
    Tg.editOrSend(MsgInfo, MsgInfo.text+"\n\n‚ùî ID –≥—Ä—É–ø–ø—ã –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å —É –æ–¥–Ω–æ–∫—É—Ä—Å–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É,\
–ª–∏–±–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ https://rasp.sstu.ru\n –û—Ç–∫—Ä—ã–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ \
URL: <code>https://rasp.sstu.ru/rasp/group/130</code> –≥–¥–µ <code>130</code> –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.", reply_markup=Tg.generateInlineKeyb(rows))

def select_abbr_name(MsgInfo):
    types = mysql.query("SELECT DISTINCT `type` FROM `groups` WHERE `group_start` = %s", (MsgInfo.text[0], ), fetchall=True)
    if(len(types) == 0):
        Tg.editOrSend(MsgInfo, "‚ö† –ì—Ä—É–ø–ø —Å —Ç–∞–∫–æ–π –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        rows = Tg.makeRows([Tg.makeButton(i['type'], f"sa_c/{MsgInfo.text[0]},{i['type']}") for i in types], max_=2)
        Tg.editOrSend(MsgInfo, "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è:", reply_markup=Tg.generateInlineKeyb(rows))

def select_course(MsgInfo):
    setUserState(MsgInfo.from_chat, f"{MsgInfo.callback_data[0]}/{','.join(MsgInfo.callback_data[1])}")
    courses = mysql.query("SELECT DISTINCT `course` FROM `groups` WHERE `group_start` = %s AND `type` = %s ORDER BY `course`",
        (MsgInfo.callback_data[1][0], MsgInfo.callback_data[1][1]), fetchall=True)
    rows = Tg.makeRows([Tg.makeButton(i['course'], f"sa_c1/{','.join(MsgInfo.callback_data[1])},{i['course']}") for i in courses])
    Tg.editOrSend(MsgInfo, "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=Tg.generateInlineKeyb(rows))

def select_group(MsgInfo):
    setUserState(MsgInfo.from_chat, f"{MsgInfo.callback_data[0]}/{','.join(MsgInfo.callback_data[1])}")
    groups = mysql.query("SELECT `id`,`name` FROM `groups` WHERE `group_start` = %s AND `type` = %s AND `course` = %s ORDER BY `name`",
        (MsgInfo.callback_data[1][0], MsgInfo.callback_data[1][1], MsgInfo.callback_data[1][2]), fetchall=True)
    rows = Tg.makeRows([Tg.makeButton(i['name'], f"cg/{i['id']}") for i in groups], max_=2)
    Tg.editOrSend(MsgInfo, "–ù–∞–∫–æ–Ω–µ—Ü, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:",
        reply_markup=Tg.generateInlineKeyb(rows, Tg.makeRows(Tg.makeButton("üîô –ò—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "pre_find_abbr"))))

def confirm_group(MsgInfo): # –≤—ã–Ω–µ—Å—Ç–∏ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    setUserState(MsgInfo.from_chat, None)
    count = mysql.query("SELECT COUNT(*) FROM `group_subs` WHERE `user_id` = %s", (MsgInfo.from_chat, ))['COUNT(*)']
    if(count >= 5):
        return Tg.editOrSend(MsgInfo, "üî¥ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≥—Ä—É–ø–ø!", reply_markup=Tg.generateInlineKeyb())
    already_in = mysql.query("SELECT `user_id` FROM `group_subs` WHERE `user_id` = %s AND `group_id` = %s",
        (MsgInfo.from_chat, MsgInfo.callback_data[1][0]))
    if(already_in is not None):
        return Tg.editOrSend(MsgInfo, "üî¥ –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–º–∏!",
            reply_markup=Tg.generateInlineKeyb(Tg.makeRows(Tg.makeButton("üîô –ò—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "pre_find_abbr"))))
    mysql.query("INSERT INTO `group_subs` (`user_id`, `group_id`) VALUES (%s, %s)", (MsgInfo.from_chat, MsgInfo.callback_data[1][0]))
    Tg.editOrSend(MsgInfo, "üü¢ –ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤–∞—à–∞!",
        reply_markup=Tg.generateInlineKeyb(Tg.makeRows(Tg.makeButton("üìù –ú–æ–∏ –≥—Ä—É–ø–ø—ã", "mg"),
            Tg.makeButton(f"‚ùó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", f"toggle_sub/{MsgInfo.callback_data[1][0]}"),
            Tg.makeButton(f"‚ÅâÔ∏è –ß—Ç–æ –∑–∞ —Ä–∞—Å—Å—ã–ª–∫–∞?", "about"), max_=1)))

def my_groups(MsgInfo):
    groups = getUserGroups(MsgInfo.from_chat)
    msg = []; buttons = []
    for g in groups:
        if(g['subscribe'] == False):
            sub = "<i>–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã</i>"
        else: sub = "<i>–ü–æ–¥–ø–∏—Å–∞–Ω—ã</i>"
        msg.append(f"ID - <code>{g['id']}</code> | {g['name']} | {sub}")
        buttons.append(Tg.makeButton(g['name'], f"chk_grp/{g['id']}"))
    if(groups is None or groups == ()):
        msg = ["<b>–ù–µ—Ç –≥—Ä—É–ø–ø</b>"]
        buttons.append(Tg.makeButton("üîç –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É", "start_find"))
    msg = "üìù –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n"+"\n".join(msg)
    keyb = Tg.generateInlineKeyb(Tg.makeRows(buttons, max_=2))
    Tg.editOrSend(MsgInfo, msg, reply_markup=keyb)

def check_group(MsgInfo):
    group = mysql.query("SELECT gg.*, gs.* FROM `groups` gg INNER JOIN `group_subs` gs ON gs.group_id = gg.id AND gs.user_id = %s WHERE `id` = %s", (MsgInfo.from_chat, MsgInfo.callback_data[1][0]))
    if(group is None or group == ()):
        return Tg.editOrSend(MsgInfo, "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é", reply_markup=Tg.generateInlineKeyb())
    count = mysql.query("SELECT COUNT(*) FROM `group_subs` WHERE `group_id` = %s", (group['id'], ))
    if(group['subscribe'] == False):
        sub = "<i>–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã</i>"
        toggle = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
    else:
        sub = "<i>–ü–æ–¥–ø–∏—Å–∞–Ω—ã</i>"
        toggle = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
    msg = f"""üìô –ì—Ä—É–ø–ø–∞ <b>{group['name']}</b>
- <b>ID</b>: <code>{group['id']}</code>
- <b>–§–æ—Ä–º–∞</b>: {group['form']}
- <b>–¢–∏–ø</b>: {group['type']}
- <b>–†–∞—Å—Å—ã–ª–∫–∞</b>: {sub}
- <b>–ò–Ω—Å—Ç–∏—Ç—É—Ç</b>: {group['institute']}
- <b>–ß–µ–ª–æ–≤–µ–∫ –≤ –≥—Ä—É–ø–ø–µ</b> (—Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ): {count['COUNT(*)']}"""
    rows = Tg.makeRows(Tg.makeButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", f"del_grp/{group['id']}"),
        Tg.makeButton(f"‚ùó {toggle}", f"toggle_sub/{group['id']}"),
        Tg.makeButton(f"‚ÅâÔ∏è –ß—Ç–æ –∑–∞ —Ä–∞—Å—Å—ã–ª–∫–∞?", f"about/{group['id']}"),
        Tg.makeButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", "mg"),
        Tg.makeButton("üóíÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", f"get_rasp/{group['id']}"), max_=2)
    Tg.editOrSend(MsgInfo, msg, reply_markup=Tg.generateInlineKeyb(rows))

def del_group(MsgInfo):
    mysql.query("DELETE FROM `group_subs` WHERE `user_id` = %s AND `group_id` = %s", (MsgInfo.from_chat, MsgInfo.callback_data[1][0]))
    keyb = Tg.generateInlineKeyb(Tg.makeRows(Tg.makeButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", "mg"), max_=2))
    Tg.editOrSend(MsgInfo, "üü¢ –ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!", reply_markup=keyb)

def toggle_subscribtion(MsgInfo):
    group = mysql.query("SELECT gg.*, gs.* FROM `groups` gg INNER JOIN `group_subs` gs ON gs.group_id = gg.id AND gs.user_id = %s WHERE `id` = %s", (MsgInfo.from_chat, MsgInfo.callback_data[1][0]))
    mysql.query("UPDATE `group_subs` SET `subscribe` = !subscribe WHERE `user_id` = %s AND `group_id` = %s",
        (MsgInfo.from_chat, MsgInfo.callback_data[1][0]))
    if(group['subscribe'] == 0):
        text = f"üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ <u>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å</u> –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã <b>{group['name']}</b>!"
        toggle = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞"
    else:
        text = f"üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ <u>–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å</u> –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã <b>{group['name']}</b>!"
        toggle = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞"
    keyb = Tg.generateInlineKeyb(Tg.makeRows(Tg.makeButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", f"chk_grp/{MsgInfo.callback_data[1][0]}"), Tg.makeButton(f"‚ùó {toggle}", f"toggle_sub/{MsgInfo.callback_data[1][0]}"), max_=1))
    Tg.editOrSend(MsgInfo, text, reply_markup=keyb)

def rasp(MsgInfo):
    groups = getUserGroups(MsgInfo.from_chat)
    buttons = []
    msg = "üîò –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:"
    for g in groups:
        buttons.append(Tg.makeButton(g['name'], f"get_rasp/{g['id']}"))
    if(groups is None or groups == ()):
        msg = "<b>–ù–µ—Ç –≥—Ä—É–ø–ø</b>"
        buttons.append(Tg.makeButton("üîç –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É", "start_find"))
    Tg.editOrSend(MsgInfo, msg, reply_markup=Tg.generateInlineKeyb(Tg.makeRows(buttons, max_=2)))

def get_rasp(MsgInfo):
    group = mysql.query("SELECT * FROM `groups` WHERE `id` = %s", (MsgInfo.callback_data[1][0], ))
    if(group is None):
        if(MsgInfo.callback_data[0] == None):
            return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.", Tg.generateInlineKeyb(empty=True)
        return Tg.editOrSend(MsgInfo, "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.",
            reply_markup=Tg.generateInlineKeyb(Tg.makeRows(Tg.makeButton("üìù –ú–æ–∏ –≥—Ä—É–ø–ø—ã", "mg"), Tg.makeButton("üîô –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "rasp"))))
    i = 0; buttons = []; msg = []
    while len(msg) < 6:
        if(i > 8):
            if(len(msg) == 0):
                if(MsgInfo.callback_data[0] == None):
                    return "‚ö† –ü–æ—Ö–æ–∂–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –Ω–µ—Ç", Tg.generateInlineKeyb(empty=True)
                return Tg.editOrSend(MsgInfo, "‚ö† –ü–æ—Ö–æ–∂–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –Ω–µ—Ç",
                    reply_markup=Tg.generateInlineKeyb(Tg.makeRows(Tg.makeButton("üóíÔ∏è –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "rasp"))))
            else:
                break
        day = mysql.query("SELECT `date`, `type`, `name`, `weekday`, `lesson_num`, `time_start`, `time_end` FROM lessons WHERE `group_id` = %s AND `date` = %s ORDER BY `lesson_num`",
            (group['id'], (date.today()+timedelta(days=i)).isoformat()), fetchall=True)
        i += 1
        if(day is None or day == ()): continue
        les = "\n".join([f"[{l['lesson_num']}] {l['name']} {l['type']}" for l in day])
        day = {'info': {'date': day[0]['date'], 'weekday': day[0]['weekday'], 'count': len(day),
                'time_start': datetime.strptime(f"{day[0]['date']} {day[0]['time_start']}", "%Y-%m-%d %H:%M:%S"),
                'time_end': datetime.strptime(f"{day[-1]['date']} {day[-1]['time_end']}", "%Y-%m-%d %H:%M:%S")}}
        buttons.append(Tg.makeButton(f"‚û°Ô∏è {day['info']['date'].strftime('%d.%m')} ({day['info']['weekday']})", f"date_rasp/{group['id']},{day['info']['date'].strftime('%Y-%m-%d')}"))
        if(len(msg) >= 2): continue
        weather = mysql.query("SELECT `temp`,`weather` FROM `weather` WHERE `date` BETWEEN %s AND %s",
            (day['info']['time_start'].strftime('%Y-%m-%d %H:%M:%S'), day['info']['time_end'].strftime('%Y-%m-%d %H:%M:%S')))
        if(weather == None):
            weather = {"temp": 0, "weather": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
        day.update({'weather': weather})
        msg.append(f"""<b>- –î–µ–Ω—å: <u>{day['info']['weekday']} {day['info']['date']}</u></b>
- <b>–ö–æ–ª-–≤–æ –ø–∞—Ä</b>: {day['info']['count']}
- <b>–ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞</b>: {day['info']['time_start'].strftime("%H:%M")}
- <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞</b>: {day['info']['time_end'].strftime("%H:%M")}
- <b>–ü–æ–≥–æ–¥–∞</b>: {day['weather']['weather']} {day['weather']['temp']}¬∞C
- <b>–ü–∞—Ä—ã</b>:
<i>{les}</i>
""")
    last_upd = group['last_appearance'].strftime("%Y-%m-%d %H:%M")
    buttons = Tg.makeRows(buttons, max_=2) + Tg.makeRows(Tg.makeButton("üåê –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", web_app={"url": f"https://rasp.sstu.ru/rasp/group/{group['id']}"})) + Tg.makeRows(Tg.makeButton("üìô –ì—Ä—É–ø–ø–∞", f"chk_grp/{group['id']}"), Tg.makeButton("üóíÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "rasp"), Tg.makeButton("üè† –ú–µ–Ω—é", "clear_state"))
    msg = f"üóìÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è <b>{group['name']}</b>\n---------------------\n" + "---------------------\n".join(msg)
    msg += f"---------------------\n- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_upd}"
    if(MsgInfo.callback_data[0] == None):
        return msg, Tg.generateInlineKeyb(buttons)
    Tg.editOrSend(MsgInfo, msg, reply_markup=Tg.generateInlineKeyb(buttons, home=False))

def date_rasp(MsgInfo):
    rasp = mysql.query("SELECT l.*, g.last_appearance, g.name AS gname FROM `lessons` l INNER JOIN `groups` g ON l.group_id = g.id WHERE `date` = %s AND `group_id` = %s ORDER BY `lesson_num`",
        (MsgInfo.callback_data[1][1], MsgInfo.callback_data[1][0]), fetchall=True)
    if(rasp is None or rasp == ()):
        return Tg.editOrSend(MsgInfo, "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.",
            reply_markup=Tg.generateInlineKeyb(Tg.makeRows(Tg.makeButton("üìù –ú–æ–∏ –≥—Ä—É–ø–ø—ã", "mg"), Tg.makeButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", "rasp"))))
    msg = []
    now = datetime.now()
    for i in range(len(rasp)):
        flag = ""
        rasp[i].update({"time_start": datetime.strptime(f"{rasp[i]['date']} {rasp[i]['time_start']}", "%Y-%m-%d %H:%M:%S"),
        "time_end": datetime.strptime(f"{rasp[i]['date']} {rasp[i]['time_end']}", "%Y-%m-%d %H:%M:%S")})
        if(rasp[i]['time_start'] < now < rasp[i]['time_end']):
            flag = "<b><u>–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞</u></b>\n"
        elif(i > 0 and rasp[i-1]['time_end'] <= now <= rasp[i]['time_start']):
            flag = "<b><u>–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞</u></b>\n"
        msg.append(f"""{flag}<b>‚Ññ –ø–∞—Ä—ã</b>: {rasp[i]['lesson_num']}
<b>–ü—Ä–µ–¥–º–µ—Ç</b>: {rasp[i]['name']}/{rasp[i]['type']}
<b>–í—Ä–µ–º—è</b>: {rasp[i]['time_start'].strftime("%H:%M")} - {rasp[i]['time_end'].strftime("%H:%M")}
<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è</b>: {rasp[i]['room']}
<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</b>: {rasp[i]['teacher']}""")
    last_upd = rasp[0]['last_appearance'].strftime("%Y-%m-%d %H:%M")
    msg = f"üóìÔ∏è <b>{rasp[0]['gname']} {MsgInfo.callback_data[1][1]} {rasp[0]['weekday']}</b>\n---------------------\n"+"\n---------------------\n".join(msg)
    msg += f"\n---------------------\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_upd}"
    buttons = Tg.makeRows(Tg.makeButton("üóíÔ∏è –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "rasp"), Tg.makeButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", f"get_rasp/{MsgInfo.callback_data[1][0]}"))
    Tg.editOrSend(MsgInfo, msg, reply_markup=Tg.generateInlineKeyb(buttons))

def stats(MsgInfo):
    date = mysql.query("SELECT `last_appearance` FROM `groups` ORDER BY `last_appearance` DESC")['last_appearance']
    groups = mysql.query("SELECT COUNT(*) FROM `groups`")["COUNT(*)"]
    lessons = mysql.query("SELECT COUNT(*) FROM `lessons`")["COUNT(*)"]
    users = mysql.query("SELECT COUNT(*) FROM `users`")["COUNT(*)"]
    subs = mysql.query("SELECT COUNT(*) FROM `group_subs`")["COUNT(*)"]
    notifies = mysql.query("SELECT COUNT(*) FROM `group_subs` WHERE `subscribe` = 1")["COUNT(*)"]
    weather = mysql.query("SELECT `date` FROM `weather` WHERE `date` LIKE %s", (((datetime.now()+timedelta(days=1)).strftime("%Y-%m-%d"))+"%",))
    if(weather is not None):
        weather = "–ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ"
    else:
        weather = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    msg = f"""‚ÑπÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</b>: {date}
<b>–ö–æ–ª-–≤–æ –≥—Ä—É–ø–ø</b>: {groups}
<b>–ö–æ–ª-–≤–æ –ø–∞—Ä</b>: {lessons}
<b>–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>: {users}
<b>–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫/—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>: {subs}/{notifies}
<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b>: {weather}"""
    Tg.editOrSend(MsgInfo, msg, reply_markup=Tg.generateInlineKeyb())

### –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
cmds = {'/start':menu,
        '/menu':menu,
        '/info':info,
        '/find':start_find,
        '/groups':my_groups,
        '/rasp':rasp,
        '/stats':stats,
}

### –°–ø–∏—Å–æ–∫ inline –¥–µ–π—Å—Ç–≤–∏–π
inlines = {
        'start_find':start_find,
        'clear_state':menu,
        'about':about,
        'pre_find_abbr':pre_find_abbr,
        'find_by_id':find_by_id,
        'sa_c':select_course,
        'sa_c1':select_group,
        'cg':confirm_group,
        'where_id':where_id,
        'mg':my_groups,
        'chk_grp':check_group,
        'del_grp':del_group,
        'toggle_sub':toggle_subscribtion,
        'rasp':rasp,
        'get_rasp':get_rasp,
        'date_rasp':date_rasp
}

### –°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
states = {
        'sa':select_abbr_name,
        'fid':select_by_id
}

###
# sa = select_abbr
# cg = confirm group
# mg = my groups
# fid = find by id
